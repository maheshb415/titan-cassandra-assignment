import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;

import com.thinkaurelius.titan.core.TitanGraph;
import com.tinkerpop.blueprints.Edge;
import com.tinkerpop.blueprints.Vertex;


public class TwitterGraph {
	
	
	
	//load twitter users data from a file into given TitanGraph. 
	//Format of each line in file => uid<tab>screenname<tab>uname<tab>createtime<tab>followercount
	static void LoadUsers(String twitterUsersFile, TitanGraph g)
	{
		BufferedReader br = null;
		 
		try {
 
			String sCurrentLine;
 
			br = new BufferedReader(new FileReader(twitterUsersFile));
 
			while ((sCurrentLine = br.readLine()) != null) {
				
				System.out.println(sCurrentLine);
				
				String[] parts = sCurrentLine.split("\t");
				
				if(parts.length != 5) {
					continue;
				}
				
				Vertex user = g.addVertex(null); 
				long userId = Long.parseLong(parts[0]);
				String userScreenName = parts[1];
				String userName = parts[2];
				String userCreateTime = parts[3];
				
				System.out.println(String.format("Setting values UserId:%s userScreenName:%s userName:%s userCreateTime:%s", userId, userScreenName, userName, userCreateTime));
				
				user.setProperty(TwitterGraphConstants.USERID, userId);
				user.setProperty(TwitterGraphConstants.USERSCREENNAME, userScreenName);
				user.setProperty(TwitterGraphConstants.USERNAME, userName);
				
				//convert userCreateTime to epoch 
				SimpleDateFormat df = new SimpleDateFormat("EEE MMM d HH:mm:ss yyyy");
				
			    Date date;
				try {
					
					date = df.parse(userCreateTime);
					long epoch = date.getTime();
					System.out.println(String.format("Setting Epoch: userCreateTime:%s Epoch:%s", date, epoch));
				    user.setProperty(TwitterGraphConstants.USERCREATETIME, epoch);	
				    
				} catch (ParseException e) {
					//could not parse userCreateTime, so use current UTC time
					
					e.printStackTrace();
					DateTime datetime = DateTime.now(DateTimeZone.UTC);
					long epoch = datetime.getMillis();
					System.out.println(String.format("Setting Milliseconds: userCreateTime:%s Epoch:%s", datetime, epoch));
					user.setProperty(TwitterGraphConstants.USERCREATETIME, epoch);
					
				} 	
				
				System.out.println(String.format("Set values UserId:%s userScreenName:%s userName:%s userCreateTime:%s", 
						user.getProperty(TwitterGraphConstants.USERID),
						user.getProperty(TwitterGraphConstants.USERSCREENNAME),
						user.getProperty(TwitterGraphConstants.USERNAME),
						user.getProperty(TwitterGraphConstants.USERCREATETIME)));
						
			}
 
		} catch (IOException e) {
			
			e.printStackTrace();
			
		} catch (Exception e) {
			
			e.printStackTrace();
		}
		finally {
			
			try {
				if (br != null)br.close();
			} catch (IOException ex) {
				ex.printStackTrace();
			}
			
		}
		
	}
	
	//load twitter follower data from a file. 
	//format of each line in file => followerUID<tab>followedUID<tab>followtime
	static void LoadFollowersData(String twitterUsersFollowersDataFile, TitanGraph g)
	{
		BufferedReader br = null;
		 
		try {
 
			String sCurrentLine;
 
			br = new BufferedReader(new FileReader(twitterUsersFollowersDataFile));
 
			while ((sCurrentLine = br.readLine()) != null) {
				System.out.println(sCurrentLine);
				String[] parts = sCurrentLine.split("\t");
				
				if(parts.length != 3) {
					continue;
				}
				
				long followerUID = Long.parseLong(parts[0]);
				long followedUID = Long.parseLong(parts[1]);
				String followTime = parts[2];
				System.out.println(String.format("Setting values followerUID:%s followedUID:%s followTime:%s", followerUID, followedUID, followTime));
				
				
				Vertex followerUser;
				Vertex followedUser;
				try {
					
					followerUser = g.getVertices(TwitterGraphConstants.USERID, followerUID).iterator().next();
					followedUser = g.getVertices(TwitterGraphConstants.USERID, followedUID).iterator().next();
					
				} catch (java.util.NoSuchElementException e1) {
					
					System.out.println(String.format("Did not find users followerUID:%s followedUID:%s", followerUID, followedUID));
					
					continue;
				}
				
				
				Edge follows = g.addEdge(null, followerUser, followedUser, TwitterGraphConstants.FOLLOWSEDGETYPE);
				Edge followedby = g.addEdge(null, followedUser, followerUser, TwitterGraphConstants.FOLLOWEDBYEDGETYPE);
				
				SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				
			    Date date;
				try {
					
					date = df.parse(followTime);
					long epoch = date.getTime();
					System.out.println(String.format("Setting Epoch: userCreateTime:%s Epoch:%s", date, epoch));
					follows.setProperty(TwitterGraphConstants.STARTFOLLOWTIME, epoch);
					followedby.setProperty(TwitterGraphConstants.STARTFOLLOWTIME, epoch);
					
				} catch (ParseException e) {
					//could not parse userCreateTime, so use current UTC time
					e.printStackTrace();
					DateTime datetime = DateTime.now(DateTimeZone.UTC);
					long epoch = datetime.getMillis();
					System.out.println(String.format("Setting Milliseconds: userCreateTime:%s Epoch:%s", datetime, epoch));
					follows.setProperty(TwitterGraphConstants.STARTFOLLOWTIME, epoch);
					followedby.setProperty(TwitterGraphConstants.STARTFOLLOWTIME, epoch);
					
				} finally {		
					
				}					    
			}
 
		} catch (IOException e) {
			
			e.printStackTrace();
			
		} catch (Exception e) {
			
			e.printStackTrace();	
			
		} finally {
			
			try {
				if (br != null)br.close();
			} catch (IOException ex) {
				ex.printStackTrace();
			}
			
		}
		
		
	}
	
	//load twitter tweets data from a file. 
	//format of each line in file => uid<tab>tweetid<tab>text<tab>tweettime
	
	static void LoadTweetsData(String twitterTweetsDataFile, TitanGraph g)
	{
		BufferedReader br = null;
		 
		try {
 
			String sCurrentLine;
 
			br = new BufferedReader(new FileReader(twitterTweetsDataFile));
 
			while ((sCurrentLine = br.readLine()) != null) {
				System.out.println(sCurrentLine);
				String[] parts = sCurrentLine.split("\t");
				
				if(parts.length != 4) {
					continue;
				}
				
				long uid = Long.parseLong(parts[0]);
				long tweetid = Long.parseLong(parts[1]);
				
				String text = parts[2];
				
				String tweetTime = parts[3];
				
				System.out.println(String.format("Setting values uid:%s tweetid:%s text:%s tweetTime:%s", 
						uid, tweetid, text, tweetTime));				
				
				//create new tweet 
				Vertex tweet = g.addVertex(null); 
				
				tweet.setProperty(TwitterGraphConstants.TWEETID, tweetid);
				tweet.setProperty(TwitterGraphConstants.TEXT, text);
				
				//convert tweetTime to epoch 
				SimpleDateFormat df = new SimpleDateFormat("EEE MMM d HH:mm:ss yyyy");
				
			    Date date;
				try {
					
					date = df.parse(tweetTime);
					long epoch = date.getTime();
					System.out.println(String.format("Setting Epoch: tweetTime:%s Epoch:%s", date, epoch));
					tweet.setProperty(TwitterGraphConstants.TWEETTIME, epoch);	
				    
				} catch (ParseException e) {
					//could not parse userCreateTime, so use current UTC time
					
					e.printStackTrace();
					DateTime datetime = DateTime.now(DateTimeZone.UTC);
					long epoch = datetime.getMillis();
					System.out.println(String.format("Setting Milliseconds: tweetTime:%s Epoch:%s", date, epoch));
					
					tweet.setProperty(TwitterGraphConstants.TWEETTIME, epoch);
					
				} 	
							
				
				//Get user vertex
				Vertex user;
								
				try {
					
					user = g.getVertices(TwitterGraphConstants.USERID, uid).iterator().next();
										
				} catch (java.util.NoSuchElementException e1) {
					
					System.out.println(String.format("Did not find user uid:%s", user));
					
					continue;
				}
				
				//create the Tweets edge
				Edge tweets = g.addEdge(null, user, tweet, TwitterGraphConstants.TWEETSEDGETYPE);
				
						    
			}
 
		} catch (IOException e) {
			
			e.printStackTrace();
			
		} catch (Exception e) {
			
			e.printStackTrace();	
			
		} finally {
			
			try {
				if (br != null)br.close();
			} catch (IOException ex) {
				ex.printStackTrace();
			}
			
		}
		
		
	}


}